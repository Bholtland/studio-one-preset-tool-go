package main

import (
	"bholtland/studio-one-preset-tool-go/internal/config"
	"bholtland/studio-one-preset-tool-go/internal/file"
	"bholtland/studio-one-preset-tool-go/internal/reader"
	"bholtland/studio-one-preset-tool-go/internal/writer"
	"context"
	"fmt"
	"github.com/urfave/cli"
	"log/slog"
	"os"
	"time"
)

func main() {
	app := &cli.App{
		Name:  "greet",
		Usage: "say a greeting",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:   "in-path",
				Value:  "C:/Users/Berend/Nextcloud/Studio One/Songs/Instrument Exploration/Instrument Exploration.song",
				Usage:  "The path to the song file",
				EnvVar: "IN_PATH",
			},
			&cli.StringFlag{
				Name:   "out-path",
				Value:  "C:/Users/Berend/Documents/Studio One Autogenerated Presets",
				Usage:  "The path to the output directory",
				EnvVar: "OUT_PATH",
			},
			&cli.BoolFlag{
				Name:   "remove-existing",
				Usage:  "Whether to remove existing files in the output directory",
				EnvVar: "REMOVE_EXISTING",
			},
		},
		Action: func(c *cli.Context) error {
			cfg := config.New(c.String("in-path"), c.String("out-path"), c.Bool("remove-existing"))
			return run(c, cfg)
		},
	}

	err := app.Run(os.Args)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %s\n", err)
		os.Exit(1)
	}
}

func run(cliCtx *cli.Context, cfg *config.Config) error {
	start := time.Now()

	ctx := context.Background()
	logger := slog.With("")

	if err := os.RemoveAll(cfg.Temp.Path); err != nil {
		return fmt.Errorf("Error cleaning up: %s", err)
	}

	defer os.RemoveAll(cfg.Temp.Path)

	readerSvc := reader.NewService(cfg)
	writerSvc := writer.NewService(cfg, ctx, logger)

	err := file.Extract(ctx, cfg.In.Full, cfg.Temp.SongContentsPath)
	if err != nil {
		return fmt.Errorf("Error extracting project: %s", err)
	}

	presetMap, err := readerSvc.GetPresets()
	if err != nil {
		return fmt.Errorf("Error parsing: %s", err)
	}

	err = writerSvc.CreatePresets(&presetMap)
	if err != nil {
		return fmt.Errorf("Error writing presets: %s", err)
	}

	logger.Info(fmt.Sprintf("Finished in %s seconds", time.Since(start)))

	return nil
}
